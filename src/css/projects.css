nav a {
  color: #666666;
}

nav a.active {
  color: #000000;
  font-weight: 700;
  transition: all 0.2s;
}

body {
  padding-top: calc(50vh - var(--title-size));
  grid-template-rows: unset;
  height: unset;
}

.projectTitle {
  position: sticky;
  top: 34px;
  grid-column: 1 / -1;
  margin-top: 0;
  font-family: ArialBold, sans-serif;
  line-height: 120%;
  text-transform: uppercase;
  font-size: var(--title-size);
  z-index: 99;
  mix-blend-mode: difference;
  color: #ffffff;
  display: flex;
  justify-content: center;
  margin-bottom: 4em;
  height: 3em;
  grid-row: 1;
}

.projectTitle > .bt {
  opacity: 0;
}

.projectTitle.first {
  height: 0;
  margin-bottom: 0;
}

.projectTitle.first > .bt {
  opacity: 1;
}

.projectTitle > .projectName {
  display: inline-block;
  white-space: nowrap;
  width: 0;
}

p {
  font-size: 11px;
  font-family: Helvetica, sans-serif;
  font-weight: 400;
  line-height: 120%;
  text-transform: uppercase;
}

.subtitle {
  font-size: 11px;
  font-family: Helvetica, sans-serif;
  font-weight: 700;
  line-height: 120%;
  text-transform: uppercase;
  color: #000000;
}

span.caption {
  font-size: var(--body-text-size);
  font-family: times-new-roman, serif;
  mix-blend-mode: difference;
  grid-column: 1 / -1;
  justify-self: right;
  position: relative;
  bottom: calc(var(--caption-overhang-y) + var(--body-text-size) / 2);
  right: calc(var(--caption-overhang-x) * -1);
  margin-bottom: calc(var(--caption-overhang-y) * -1);

  /* This is a massive hack to support the mix blend mode
   which doesn't work with relative positioning. So we use
   a linear gradient to colour the bit of text that overhangs
   solid black which is what it would be anyway on the white
   background. Only works on the white background.
   */
  background-image: linear-gradient(
    to left,
    #000000 var(--caption-overhang-x),
    #ffffff var(--caption-overhang-x)
  );
  background-clip: text;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-size: 100%;
  background-repeat: repeat;

  z-index: 99999;
}

article {
  grid-column-start: 3;
  grid-column-end: 19;
}

/*
We can't use subgrid here because the main project container
must be a block element so the position sticky works correctly.
So here we're creating another grid with the same column widths
as the main body grid, just fewer of them.
*/
article div.projectContent {
  display: grid;
  grid-template-columns: repeat(16, calc(calc(100vw - 40px) / 20));
}

article div.copy {
  grid-column-start: 1;
  grid-column-end: 5;
  grid-row: 1;
  position: sticky;
  top: calc(50vh + var(--title-size));
  transform: translateY(calc(-50% - var(--title-size)));
  align-self: start;
  margin-bottom: 50em;
}

article div.imagery {
  display: grid;
  grid-template-columns: subgrid;
  grid-column-start: 9;
  grid-column-end: 17;
  grid-row: 1;
  transform: translateY(calc(-50vh));
  cursor: grab;
}

article div.imagery > div {
  max-height: 77vh;
  overflow: hidden;
}

div.blurBorderImage {
  display: grid;
  grid-template-columns: subgrid;
  grid-column-start: 1;
  grid-column-end: 9;
  overflow: hidden;
  align-items: center;
  justify-items: center;
}

div.blurBorderImage > :first-child {
  grid-row: 1;
  grid-column-start: 1;
  grid-column-end: 9;
  filter: blur(40px);
  align-self: center;
  transform: scale(120%);
  max-height: 77vh;
}

div.blurBorderImage > :last-child {
  grid-row: 1;
  grid-column-start: 2;
  grid-column-end: 8;
  width: 100%;
  z-index: 50;
  align-self: center;
}

div.blurBorderImage.fullWidth > img:last-child {
  grid-column-start: 1;
  grid-column-end: 9;
}

/* Top image is 1 column wider and offset by half a column */
div.blurBorderImage.mobile > img:last-child {
  grid-column-start: 1;
  grid-column-end: 8;
  margin-left: calc((calc(100vw - 40px) / 20) / 2);
}

div.fullWidthImage {
  grid-column-start: 1;
  grid-column-end: 9;
  width: 100%;
  display: flex;
  align-items: center;
}

div.fullWidthImage > * {
  width: 100%;
}

div.videoWithBackgroundImage {
  display: grid;
  grid-template-columns: subgrid;
  align-items: center;
  grid-column-start: 1;
  grid-column-end: 9;
  overflow: hidden;
}

div.videoWithBackgroundImage > img {
  grid-row: 1;
  grid-column-start: 1;
  grid-column-end: 9;
  width: 100%;
}

div.videoWithBackgroundImage > video {
  grid-row: 1;
  grid-column-start: 1;
  grid-column-end: 9;
  width: 100%;
}

.heroButton {
  position: relative;
  bottom: 10px;
  background-color: #ffffff;
  height: var(--hero-button-height);
  display: inline-block;
}

.heroButton svg {
  mix-blend-mode: difference;
}

.heroButton svg .icon {
  fill: #ffffff;
  animation: fadeInOut 1s ease-in-out alternate-reverse infinite;
}

.heroButton svg .text {
  fill: #ffffff;
}

.heroButton svg .edge {
  stroke: #ffffff;
  stroke-linecap: round;
  stroke-dasharray: 2 10;
  transition: stroke-dasharray 1s;
}

.heroButton svg:hover .edge {
  stroke-dasharray: 10 10;
}

@keyframes fadeInOut {
  to {
    opacity: 0;
  }
}
